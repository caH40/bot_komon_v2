import 'dotenv/config';

import { Markup } from 'telegraf';
import { accountButtons } from './button/accaunt.js';
import { buttonCatFromStageRiders } from './button/admin.js';
import { mainBtn } from './button/main.js';
import { resultSeriesBtn } from './button/schedule-btn.js';
import { teamBtn, teamsBtn } from './button/team.js';
// –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
export async function mainMenuKeyboard(ctx) {
	return { parse_mode: 'html', ...Markup.inlineKeyboard(await mainBtn(ctx)) };
}
export async function accountKeyboard(ctx) {
	return {
		parse_mode: 'html',
		...Markup.inlineKeyboard(await accountButtons(ctx)),
	};
}

export async function teamKeyboard(rider) {
	return { parse_mode: 'html', ...Markup.inlineKeyboard(await teamBtn(rider)) };
}
export function teamForApprovalKeyboard(teamId) {
	return {
		parse_mode: 'html',
		...Markup.inlineKeyboard([
			Markup.button.callback('–û–¥–æ–±—Ä–∏—Ç—å', `m_5_team_add_Y_${teamId}`),
			Markup.button.callback('–û—Ç–∫–ª–æ–Ω–∏—Ç—å', `m_5_team_add_N_${teamId}`),
		]),
	};
}
export function teamAddRiderKeyboard(rider) {
	return {
		parse_mode: 'html',
		...Markup.inlineKeyboard([
			Markup.button.callback('–û–¥–æ–±—Ä–∏—Ç—å', `m_3_2_5_1_add_Y_${rider}`),
			Markup.button.callback('–û—Ç–∫–ª–æ–Ω–∏—Ç—å', `m_3_2_5_1_add_N_${rider}`),
		]),
	};
}
export function teamRemoveRiderKeyboard(rider) {
	return {
		parse_mode: 'html',
		...Markup.inlineKeyboard([Markup.button.callback('–£–¥–∞–ª–∏—Ç—å —Ä–∞–π–¥–µ—Ä–∞', `m_3_2_5_2_E_${rider}`)]),
	};
}

export function teamsKeyboard(teams) {
	return { parse_mode: 'html', ...Markup.inlineKeyboard(teamsBtn(teams)) };
}

// –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å–µ—Ä–∏–π main_series
export function seriesKeyboard(series) {
	const keyboard = {
		parse_mode: 'html',
		...Markup.inlineKeyboard([
			...series.map(elm => [Markup.button.callback(`${elm.name} üöµ‚Äç‚ôÄÔ∏è`, 'm_1_all__' + elm._id)]),
			[Markup.button.callback('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚ùóÔ∏è', 'main')],
		]),
	};
	return keyboard;
}
// –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —Å–µ—Ä–∏–π
export function scheduleKeyboard(series) {
	const keyboard = {
		parse_mode: 'html',
		...Markup.inlineKeyboard([
			[Markup.button.callback('–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –∑–∞–µ–∑–¥—ã üìå', 'm_2_V')],
			...series.map(elm => [Markup.button.callback(`${elm.name} üöµ‚Äç‚ôÄÔ∏è`, 'm_2_all__' + elm._id)]),
			[Markup.button.callback('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚ùóÔ∏è', 'main')],
		]),
	};
	return keyboard;
}
// –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∑–∞—á–µ—Ç–æ–≤ —Å–µ—Ä–∏–∏
export async function resultSeriesKeyboard(cbqData) {
	return {
		parse_mode: 'html',
		...Markup.inlineKeyboard(await resultSeriesBtn(cbqData)),
	};
}
export function resultStageCatKeyboard(stageId) {
	return {
		parse_mode: 'html',
		...Markup.inlineKeyboard([
			[
				Markup.button.webApp(
					'–û–±—â–∏–π –ø—Ä–æ—Ç–æ–∫–æ–ª üìå',
					`${process.env.SERVER}/results/stage/T${stageId}`
				),
			],
			[Markup.button.webApp('–ì—Ä—É–ø–ø–∞ "A" üí™', `${process.env.SERVER}/results/stage/A${stageId}`)],
			[Markup.button.webApp('–ì—Ä—É–ø–ø–∞ "B" üëä', `${process.env.SERVER}/results/stage/B${stageId}`)],
			[Markup.button.webApp('–ì—Ä—É–ø–ø–∞ "C" ‚úåÔ∏è', `${process.env.SERVER}/results/stage/C${stageId}`)],
			[Markup.button.webApp('–ì—Ä—É–ø–ø–∞ "W" üëç', `${process.env.SERVER}/results/stage/W${stageId}`)],
			[Markup.button.callback('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚ùóÔ∏è', 'main')],
		]),
	};
}
export function teamLeaveKeyboard(userId) {
	return {
		parse_mode: 'html',
		...Markup.inlineKeyboard([
			[Markup.button.callback('–î–∞, —Ö–æ—á—É –≤—ã–π—Ç–∏ –∏–∑ –∫–æ–º–∞–Ω–¥—ã ‚ùå', `m_3_2_4_1_E--teamLeave_${userId}`)],
			[Markup.button.callback('<< –Ω–∞–∑–∞–¥ >>', `m_3_2_`)],

			[Markup.button.callback('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚ùóÔ∏è', 'main')],
		]),
	};
}
export function teamManagementKeyboard(userId) {
	return {
		parse_mode: 'html',
		...Markup.inlineKeyboard([
			[Markup.button.callback('–ó–∞—è–≤–∫–∏ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –∫–æ–º–∞–Ω–¥—É ‚úîÔ∏è', `m_3_2_5_1_`)],
			[Markup.button.callback('–£–¥–∞–ª–∏—Ç—å —Ä–∞–π–¥–µ—Ä–∞ –∏–∑ –∫–æ–º–∞–Ω–¥—ã ‚ùå', `m_3_2_5_2_`)],
			[Markup.button.callback('–ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ üìù', `m_3_2_5_3_`)],
			[Markup.button.callback('–£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã ‚ùå‚ùå', `m_3_2_5_4_E`)],
			[Markup.button.callback('<< –Ω–∞–∑–∞–¥ >>', `m_3_2_`)],
			[Markup.button.callback('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚ùóÔ∏è', 'main')],
		]),
	};
}
export function resultSeriesGeneralKeyboard(seriesId) {
	return {
		parse_mode: 'html',
		...Markup.inlineKeyboard([
			[Markup.button.callback('–ì—Ä—É–ø–ø–∞ "A" üí™', `m_1_all_2_all_A_${seriesId}`)],
			[Markup.button.callback('–ì—Ä—É–ø–ø–∞ "B" üëä', `m_1_all_2_all_B_${seriesId}`)],
			[Markup.button.callback('–ì—Ä—É–ø–ø–∞ "C" ‚úåÔ∏è', `m_1_all_2_all_C_${seriesId}`)],
			[Markup.button.callback('–ì—Ä—É–ø–ø–∞ "W" üëç', `m_1_all_2_all_W_${seriesId}`)],
			[Markup.button.callback('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚ùóÔ∏è', 'main')],
		]),
	};
}
// –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∞–¥–º–∏–Ω –∫–∞–±–∏–Ω–µ—Ç–∞
export const adminKeyboard = {
	parse_mode: 'html',
	...Markup.inlineKeyboard([
		[Markup.button.callback('–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–∞–º–∏ ‚öôÔ∏è', 'm_5_1_')],
		[Markup.button.callback('–ó–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ—Ç–æ–∫–æ–ª üíæ', 'admin_getProtocol')],
		[Markup.button.callback('–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ üìÑ', 'admin_getSchedule')],
		[Markup.button.callback('–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ä–∞–π–¥–µ—Ä–∞–º ü¶æ', 'm_5_4_')],
		[Markup.button.callback('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞–ª—å–Ω—ã—Ö –∑–∞—á–µ—Ç–æ–≤ üîÑ', 'm_5_5_')],
		[Markup.button.callback('–°–ø—Ä–∏–Ω—Ç –∏ –≥–æ—Ä–Ω—ã–π –∑–∞—á–µ—Ç—ã üí®', 'm_5_6_')],
		[Markup.button.callback('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚ùóÔ∏è', 'main')],
	]),
};
export const adminTeamKeyboard = {
	parse_mode: 'html',
	...Markup.inlineKeyboard([
		[Markup.button.callback('–ó–∞—è–≤–∫–∏ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã', 'm_5_1_1_E')],
		[Markup.button.callback('–£–¥–∞–ª–∏—Ç—å –∫–æ–º–∞–Ω–¥—É', 'm_5_1_2_')],
		[Markup.button.callback('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚ùóÔ∏è', 'main')],
	]),
};
export const adminCategoriesKeyboard = {
	parse_mode: 'html',
	...Markup.inlineKeyboard([
		[Markup.button.callback('–í—ã–±–æ—Ä —Ä–∞–π–¥–µ—Ä–∞', 'm_5_4_1_')],
		[Markup.button.callback('–í—ã–±–æ—Ä –∑–∞–µ–∑–¥–∞', 'm_5_4_2_')],
		[Markup.button.callback('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚ùóÔ∏è', 'main')],
	]),
};

export function adminCatRidersKeyboard(riderId) {
	return {
		parse_mode: 'html',
		...Markup.inlineKeyboard([
			[
				Markup.button.callback('A', `m_5_4_1_E__A_${riderId}`),
				Markup.button.callback('B', `m_5_4_1_E__B_${riderId}`),
				Markup.button.callback('C', `m_5_4_1_E__C_${riderId}`),
			],
		]),
	};
}
export function adminCatRidersFromStageKeyboard(stages) {
	return {
		parse_mode: 'html',
		...Markup.inlineKeyboard(buttonCatFromStageRiders(stages)),
	};
}

export function adminPointsSeriesKeyboard(series) {
	return {
		parse_mode: 'html',
		...Markup.inlineKeyboard([
			...series.map(ser => [Markup.button.callback(`${ser.name} üèÅ`, `m_5_5_E__${ser._id}`)]),
			[Markup.button.callback('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚ùóÔ∏è', 'main')],
		]),
	};
}
export function pointsSMSeriesKeyboard(series) {
	return {
		parse_mode: 'html',
		...Markup.inlineKeyboard([
			...series.map(ser => [Markup.button.callback(`${ser.name} üèÅ`, `m_5_6_all__${ser._id}`)]),
			[Markup.button.callback('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚ùóÔ∏è', 'main')],
		]),
	};
}

export function pointsSMStageKeyboard(stages) {
	return {
		parse_mode: 'html',
		...Markup.inlineKeyboard([
			...stages.map(stage => [
				Markup.button.callback(
					`–≠—Ç–∞–ø ‚Ññ${stage.number}, ${stage.type} üèÅ`,
					`m_5_6_all_all__${stage._id}`
				),
			]),
			[Markup.button.callback('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚ùóÔ∏è', 'main')],
		]),
	};
}
export function pointsSMboard(stageId) {
	return {
		parse_mode: 'html',
		...Markup.inlineKeyboard([
			[Markup.button.callback('–†–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å–ø—Ä–∏–Ω—Ç–µ—Ä—Å–∫–∏–µ –æ—á–∫–∏', `m_5_6_all_all_1__${stageId}`)],
			[Markup.button.callback('–†–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≥–æ—Ä–Ω—ã–µ –æ—á–∫–∏', `m_5_6_all_all_2__${stageId}`)],
			[Markup.button.callback('<< –Ω–∞–∑–∞–¥ >>', `m_5_6_`)],
			[Markup.button.callback('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚ùóÔ∏è', 'main')],
		]),
	};
}

// –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —ç—Ç–∞–ø–æ–≤ —Å–µ—Ä–∏–∏
export function resultStagesKeyboard(series) {
	const keyboard = {
		parse_mode: 'html',
		...Markup.inlineKeyboard([
			...series.map(stage => [
				Markup.button.callback(
					`–≠—Ç–∞–ø ${stage.number}, ${new Date(stage.dateStart).toLocaleDateString()}, ${
						stage.type
					} üèÅ`,
					`stage_${stage._id}`
				),
			]),
			[Markup.button.callback('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚ùóÔ∏è', 'main')],
		]),
	};

	return keyboard;
}
export const clearCharts = {
	parse_mode: 'html',
	...Markup.inlineKeyboard([[Markup.button.callback('–û—á–∏—Å—Ç–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è', `clear`)]]),
};

export function mobVsDesKeyboard(queryData) {
	const keyboard = {
		parse_mode: 'html',
		...Markup.inlineKeyboard([
			[
				Markup.button.callback('–î–µ—Å–∫—Ç–æ–ø üíª', `Des_${queryData}`),
				Markup.button.callback('–°–º–∞—Ä—Ç—Ñ–æ–Ω üì±', `Mob_${queryData}`),
			],
			[Markup.button.callback('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚ùóÔ∏è', 'main')],
		]),
	};

	return keyboard;
}
