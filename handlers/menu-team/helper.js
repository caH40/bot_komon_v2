import { addRiderDB, notAddRiderDB } from '../../controllersDB/team-add-rider.js';
import {
	teamAddRiderKeyboard,
	teamKeyboard,
	teamLeaveKeyboard,
	teamManagementKeyboard,
	teamRemoveRiderKeyboard,
	teamsKeyboard,
} from '../../keyboard/keyboard.js';
import { mainMenu } from '../../keyboard/main-menu.js';
import { Rider } from '../../Model/Rider.js';
import { Team } from '../../Model/Team.js';

export async function teamMain(ctx) {
	try {
		const userId = ctx.update.callback_query.message.chat.id;
		const riderDB = await Rider.findOne({ telegramId: userId }).populate('teamId');
		if (!riderDB)
			return await ctx.replyWithHTML('–î–ª—è —ç—Ç–æ–≥–æ –º–µ–Ω—é –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ <b>—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è!</b> üÜî');

		let title = riderDB.teamId?.name
			? `–ö–æ–º–∞–Ω–¥–∞ "${riderDB.teamId?.name}" üí™`
			: 'ü§ù –ü–æ—Ä–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è—Ç—å—Å—è –∫ –∫–æ–º–∞–Ω–¥–µ –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ—é!';

		return await ctx.editMessageText(`<b>${title}</b>`, await teamKeyboard(riderDB));
	} catch (error) {
		console.log(error);
	}
}
export async function teamChooseForJoin(ctx, cbqData) {
	try {
		const teamId = cbqData.slice(24);
		const userId = ctx.update.callback_query.from.id;

		const riderDB = await Rider.findOne({ telegramId: userId });

		const monthAndHalfInMilliseconds = 45 * 24 * 3600000;
		const today = new Date().getTime();

		const exTeam = await Team.findOne({ riders: { $elemMatch: { rider: riderDB._id } } });
		if (exTeam) {
			const riderForCheck = exTeam.riders.find(
				rider => rider.rider.toString() === riderDB._id.toString()
			);
			if (today - riderForCheck.dateLeave < monthAndHalfInMilliseconds)
				return await ctx.reply(
					`–í—ã –≤—ã—Ö–æ–¥–∏–ª–∏ –∏–∑ –∫–æ–º–∞–Ω–¥—ã ${exTeam.name} ${new Date(
						riderForCheck.dateLeave
					).toLocaleString()}. –¢—Ä–∞–Ω—Å—Ñ–µ—Ä–Ω–æ–µ –æ–∫–Ω–æ –∑–∞–∫—Ä—ã—Ç–æ –¥–æ ${new Date(
						monthAndHalfInMilliseconds + riderForCheck.dateLeave
					).toLocaleString()}.`
				);
			const response = await Team.findOneAndUpdate(
				{ _id: exTeam._id },
				{ $pull: { riders: { rider: riderDB._id } } }
			);
		}

		const teamDB = await Team.findOneAndUpdate(
			{ _id: teamId },
			{ $addToSet: { requestRiders: riderDB._id.toString() } },
			{ returnDocument: 'after' }
		).populate('riders.rider');

		const capitan = teamDB.riders[0].rider;
		if (teamDB.requestRiders.includes(riderDB._id)) {
			const time = new Date().toLocaleString();
			await ctx.telegram.sendMessage(
				capitan.telegramId,
				`
		${time}. –ü–æ—Å—Ç—É–ø–∏–ª–∞ –∑–∞—è–≤–∫–∞ –æ—Ç —Ä–∞–π–¥–µ—Ä–∞ ${riderDB.lastName} ${riderDB.firstName} –Ω–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –í–∞—à–µ–π –∫–æ–º–∞–Ω–¥–µ. –î–ª—è —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ –∑–∞—è–≤–æ–∫:
		–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç >>
		–ö–æ–º–∞–Ω–¥–∞ >>
		–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π >>
		–ó–∞—è–≤–∫–∏ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –∫–æ–º–∞–Ω–¥—É >>
		`
			);
			await ctx
				.reply(
					`–í—ã –ø–æ–¥–∞–ª–∏ –∑–∞—è–≤–∫—É –Ω–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –∫–æ–º–∞–Ω–¥–µ "${teamDB.name}". –ö–∞–ø–∏—Ç–∞–Ω –∫–æ–º–∞–Ω–¥—ã @${capitan.telegramUsername} —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç –∑–∞—è–≤–∫—É –∏ –ø—Ä–∏–º–µ—Ç —Ä–µ—à–µ–Ω–∏–µ.`
				)
				.then(message => ctx.session.data.messagesIdForDelete.push(message.message_id));
		} else {
			await ctx
				.retry(
					'–ß—Ç–æ —Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è.'
				)
				.then(message => ctx.session.data.messagesIdForDelete.push(message.message_id));
		}
		return await mainMenu(ctx);
	} catch (error) {
		console.log(error);
	}
}

export async function teamJoin(ctx) {
	try {
		const teamDB = await Team.find({ isAllowed: true });
		if (teamDB.length === 0)
			return await ctx
				.replyWithHTML('–û—á–µ–Ω—å —Å—Ç—Ä–∞–Ω–Ω–æ, –Ω–µ —Å–æ–∑–¥–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã ü§∑‚Äç‚ôÇÔ∏è')
				.then(message => ctx.session.data.messagesIdForDelete.push(message.message_id));

		return await ctx.editMessageText(
			`<b>üìå –°–ø–∏—Å–æ–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥</b>`,
			teamsKeyboard(teamDB)
		);
	} catch (error) {
		console.log(error);
	}
}

export async function teamCreate(ctx) {
	try {
		await mainMenu(ctx);
		return await ctx.scene.enter('firstSceneCreateTeam');
	} catch (error) {
		console.log(error);
	}
}
export async function teamLeave(ctx) {
	try {
		const userId = ctx.update.callback_query.from.id;

		const riderDB = await Rider.findOne({ telegramId: userId }).populate('teamId');
		let teamName = riderDB.teamId?.name;

		return await ctx.editMessageText(
			`<b>üö™ –í—ã—Ö–æ–¥ –∏–∑ –∫–æ–º–∞–Ω–¥—ã "${teamName}"</b>`,
			teamLeaveKeyboard(riderDB._id)
		);
	} catch (error) {
		console.log(error);
	}
}
export async function teamManagement(ctx) {
	try {
		const userId = ctx.update.callback_query.from.id;

		const riderDB = await Rider.findOne({ telegramId: userId }).populate('teamId');
		let teamName = riderDB.teamId?.name;

		return await ctx.editMessageText(
			`<b>üíº –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π "${teamName}"</b>`,
			teamManagementKeyboard(riderDB._id)
		);
	} catch (error) {
		console.log(error);
	}
}
export async function teamAddRider(ctx) {
	try {
		const userId = ctx.update.callback_query.from.id;

		const riderDB = await Rider.findOne({ telegramId: userId }).populate('teamId');
		const candidates = riderDB.teamId.requestRiders;

		if (candidates.length === 0)
			return await ctx
				.reply('–ù–µ—Ç –∑–∞—è–≤–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –≤ –∫–æ–º–∞–Ω–¥—É.')
				.then(message => ctx.session.data.messagesIdForDelete.push(message.message_id));

		candidates.forEach(async _id => {
			const riderDB = await Rider.findOne({ _id });
			let title = `
–†–∞–π–¥–µ—Ä: ${riderDB.lastName} ${riderDB.firstName}
–ó–≤–∏—Ñ—Ç: ${riderDB.lastNameZwift} ${riderDB.firstNameZwift}
`;
			await ctx
				.reply(title, teamAddRiderKeyboard(riderDB._id))
				.then(message => ctx.session.data.messagesIdForDelete.push(message.message_id));
		});
	} catch (error) {
		console.log(error);
	}
}

export async function teamApprovalRider(ctx, cbqData) {
	try {
		const action = cbqData.slice(14, 15);
		const candidateId = cbqData.slice(16);

		if (action === 'Y') await addRiderDB(ctx, candidateId);
		if (action === 'N') await notAddRiderDB(ctx, candidateId);
	} catch (error) {
		console.log(error);
	}
}

export async function teamRemoveRider(ctx) {
	try {
		const userId = ctx.update.callback_query.from.id;

		const riderDB = await Rider.findOne({ telegramId: userId }).populate('teamId');
		let teamId = riderDB.teamId?._id;
		const ridersDB = await Rider.find({ $and: [{ teamId }, { _id: { $ne: riderDB._id } }] });

		if (ridersDB.length === 0)
			return await ctx
				.reply('–í—ã –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —Ä–∞–π–¥–µ—Ä –≤ –∫–æ–º–∞–Ω–¥–µ, –í–∞–º –Ω–µ–∫–æ–≥–æ —É–¥–∞–ª—è—Ç—å –∏–∑ –∫–æ–º–∞–Ω–¥—ã!')
				.then(message => ctx.session.data.messagesIdForDelete.push(message.message_id));

		ridersDB.forEach(async rider => {
			let title = `
–†–∞–π–¥–µ—Ä: ${rider.lastName} ${rider.firstName}
–ó–≤–∏—Ñ—Ç: ${rider.lastNameZwift} ${rider.firstNameZwift}
`;
			await ctx
				.reply(title, teamRemoveRiderKeyboard(rider._id))
				.then(message => ctx.session.data.messagesIdForDelete.push(message.message_id));
		});
	} catch (error) {
		console.log(error);
	}
}
export async function teamRemove(ctx) {
	try {
		const userId = ctx.update.callback_query.from.id;
		const riderDB = await Rider.findOne({ telegramId: userId }).populate('teamId');
		const ridersDB = await Rider.find({ teamId: riderDB?.teamId._id });

		if (ridersDB.length > 1)
			return await ctx
				.reply(
					'–í—ã –Ω–µ –º–æ–∂–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∫–æ–º–∞–Ω–¥—É, –µ—Å–ª–∏ –≤ –Ω–µ–π –µ—Å—Ç—å —Ä–∞–π–¥–µ—Ä—ã. –°–Ω–∞—á–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–¥–∞–ª–∏—Ç—å —Ä–∞–π–¥–µ—Ä–æ–≤ –∏–∑ –∫–æ–º–∞–Ω–¥—ã.'
				)
				.then(message => ctx.session.data.messagesIdForDelete.push(message.message_id));

		await Team.findOneAndDelete({ _id: riderDB.teamId._id }).catch(error => console.log(error));
		await Rider.findOneAndUpdate({ telegramId: userId }, { $unset: { teamId: 1 } }).catch(error =>
			console.log(error)
		);

		await ctx
			.reply(`–í—ã —É–¥–∞–ª–∏–ª–∏ –∫–æ–º–∞–Ω–¥—É "${riderDB.teamId.name}"`)
			.then(message => ctx.session.data.messagesIdForDelete.push(message.message_id));

		return mainMenu(ctx);
	} catch (error) {
		console.log(error);
	}
}
export async function teamWait(ctx) {
	try {
		return await ctx
			.reply(`–ù–∞–¥–æ –Ω–µ–º–Ω–æ–≥–æ –ø–æ–¥–æ–∂–¥–∞—Ç—å –¥–æ –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏—è –∫–∞–ø–∏—Ç–∞–Ω–æ–º –∫–æ–º–∞–Ω–¥—ã...`)
			.then(message => ctx.session.data.messagesIdForDelete.push(message.message_id));
	} catch (error) {
		console.log(error);
	}
}
export async function teamDescription(ctx) {
	try {
		await ctx.scene.enter('teamDescription');
	} catch (error) {
		console.log(error);
	}
}
